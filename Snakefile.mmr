
##### mmr #####
rule mmr_cluster_cosmic:
  input:
    summary="out/aggregate/mmr.summary.tsv",
    genes=config["genes_cosmic"]
  output:
    "out/aggregate/mmr.cluster.cosmic.png"
  log:
    stderr="log/mmr.cluster.cosmic.stderr"
  shell:
    "src/cluster_mmr.py --image {output} --genes {input.genes} <{input.summary} 2>{log.stderr}"

rule mmr_cluster_mmr:
  input:
    summary="out/aggregate/mmr.summary.tsv",
    genes=config["genes_mmr"]
  output:
    "out/aggregate/mmr.cluster.mmr.png"
  log:
    stderr="log/mmr.cluster.mmr.stderr"
  shell:
    "src/cluster_mmr.py --image {output} --genes {input.genes} <{input.summary} 2>{log.stderr}"

rule mmr_cluster_cancertype:
  input:
    summary="out/aggregate/mmr.summary.tsv",
    genes="out/oncogenes.msi"
  output:
    "out/aggregate/mmr.cluster.cancertype.png"
  log:
    stderr="log/mmr.cluster.cancertype.stderr"
  shell:
    "src/cluster_mmr.py --image {output} --genes {input.genes} <{input.summary} 2>{log.stderr}"


# mmr analysis output is a list of candidates likely to be dMMR
rule mmr_stats:
  input:
    expand("out/{tumour}.mmr.{caller}.filter.somatic.rare.vcf", tumour=config['tumours'], caller=config['callers'])
    #expand("out/{tumour}.mmr.hmmcopy.filter.bed", tumour=config['tumours']) # TODO uncomment to enable hmmcopy
  output:
    "out/aggregate/mmr.summary.tsv"
  log:
    stderr="log/mmr.summary.stderr",
  shell:
    "src/mmr_stats.py --all --verbose {input} 1>{output} 2>{log.stderr}"

rule mmr_stats_just_ddr:
  input:
    summary="out/aggregate/mmr.summary.tsv",
    genes=config['genes_ddr']
  output:
    "out/aggregate/ddr.summary.tsv"
  log:
    stderr="log/ddr.summary.stderr"
  shell:
    "src/mmr_filter.py --verbose --genes {input.genes} <{input.summary} 1>{output} 2>{log.stderr}"

# remove common
rule filter_common_mmr:
  input:
    "out/aggregate/mmr.{caller}.common",
    "out/{tumour}.mmr.{caller}.filter.somatic.vcf"
  output:
    "out/{tumour}.mmr.{caller}.filter.somatic.rare.vcf"
  log:
    stderr="log/filter_common_mmr.{tumour}.{caller}.stderr"
  shell:
    "src/filter_common_mutations.py --threshold 0.2 --common {input[0]} --position_only < {input[1]} >{output} 2>{log.stderr}"

# tumour specific - remove germline calls
rule filter_somatic_mmr:
  input:
    "out/{tumour}.mmr.{caller}.filter.vcf",
    expand("out/{sample}.mmr.{{caller}}.filter.vcf", sample=config['samples']) # we depend on the germline which is one of the other samples
  output:
    "out/{tumour}.mmr.{caller}.filter.somatic.vcf"
  log:
    stderr="log/filter_somatic_mmr.{tumour}.{caller}.stderr"
  shell:
    "src/subtract_germline.sh {input[0]} >{output} 2>{log.stderr}"

rule common_mmr_mutations:
  input:
    expand("out/{tumour}.mmr.{{caller}}.filter.somatic.vcf", tumour=config['tumours']),
  output:
    "out/aggregate/mmr.{caller}.common"
  shell:
    "src/find_common_mutations.py --vcfs {input} --threshold 2 --position_only > {output}"

# applies filtering to the annotated vcf files
rule mmr_filter:
  input:
    "out/{sample}.mmr.{caller}.vep.vcf"
  output:
    "out/{sample}.mmr.{caller}.filter.vcf"
  log:
    stderr="log/filter.{sample}.{caller}.stderr"
  shell:
    "src/filter_vcf.py {wildcards.caller} < {input} 1>{output} 2>{log.stderr}"

# annotates vcf files with vep
rule mmr_vep:
  input:
    "out/ref/regions.mmr.bed",
    "in/{sample}.{caller}.vcf"
  output:
    "out/{sample}.mmr.{caller}.vep.vcf"
  log:
    stderr="log/annotate.{sample}.{caller}.stderr",
    stdout="log/annotate.{sample}.{caller}.stdout"
  shell:
    "src/annotate.sh {config[genome]} {input} {output} 1>{log.stdout} 2>{log.stderr}"

# hmmcopy
rule hmmcopy_filter:
  input:
    "in/{sample}.hmmcopy",
    "out/ref/regions.mmr.bed"
  output:
    "out/{sample}.mmr.hmmcopy.filter.bed"
  shell:
    "{config[module_bedtools]} && "
    "bedtools intersect -b {input[0]} -a {input[1]} -wa -wb | awk '{{ if ($8 != 3) print }}' > {output}"

# generates bed regions to filter vcfs on based on the provided genes, and refseq exons
rule make_mmr_regions:
  input: 
    genes=[config["genes_mmr"], config["genes_cosmic"]],
    refseq=config["refseq"],
    lengths=config["genome_lengths"]
  output:
    "out/ref/regions.mmr.bed"
  shell:
    "{config[module_bedtools]} && "
    "src/make_bed.py {input.genes} < {input.refseq} | sort -k1,1 -k2,2n | bedtools merge -i - -c 4 -o distinct | bedtools slop -b {config[slop]} -i - -g {input.lengths} > {output}"

