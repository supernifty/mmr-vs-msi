
### comparing groups for common and different gene mutations

# steps
# - obtain a list of affected items (genes) for each sample
# - turn this into proportions for each group
# - plots and other analyses

# generate a table of samples with which genes are affected for that sample in an msi region 
rule affected_genes:
  input:
    "out/aggregate/msi.cluster.tumours" # Chrom   Begin   End     Annotation      Len     Samples 0151010101_T    0151100011_T...
  output:
    "out/aggregate/msi.affected_genes.tsv"
  log:
    stderr="log/affected_genes.stderr"
  shell:
    "src/affected_genes.py --verbose < {input} >{output} 2>{log.stderr}"

# merge replicates
rule merge_replicates:
  input:
    "out/aggregate/msi.affected_genes.tsv"
  output:
    "out/aggregate/msi.affected_genes.merged.tsv"
  log:
    stderr="log/merge_replicates.stderr"
  params:
    replicates=config['replicates']
  shell:
    "src/merge_replicates.py --verbose --replicates {params.replicates} <{input} >{output} 2>{log.stderr}"

# find what proportion of genes are affected in specified groups of interest
rule affected_proportion:
  input:
    "out/aggregate/msi.affected_genes.merged.tsv"
  output:
    raw="out/aggregate/msi.affected_proportion.tsv",
    sorted="out/aggregate/msi.affected_proportion.sorted.tsv"
  log:
    stderr="log/affected_proportion.stderr"
  params:
    group1=config['group1'],
    group2=config['group2']
  shell:
    "src/compare_groups.py --verbose --group1 {params.group1} --group2 {params.group2} < {input} >{output.raw} 2>{log.stderr} && sort -n -k9 < {output.raw} > {output.sorted}"

rule plot_affected:
  input:
    affected="out/aggregate/msi.affected_proportion.tsv"
  output:
    "out/aggregate/msi.affected_proportion.png"
  log:
    stderr="log/plot_affected.stderr"
  shell:
    "src/plot_affected.py --labels --verbose --output {output} <{input.affected} 2>{log.stderr}"

