
# overall stats incorporating msi and mmr
#rule msi_assess:
#  input:
#    "out/mmr.summary",
#    "out/mutations.summary",
#    expand("out/{sample}.msi.{caller}.annotated.vcf", sample=config['samples'], caller=config['msi_callers'])
#  output:
#    "out/msi.summary"
#  log:
#    stderr="log/msi.summary.stderr",
#  shell:
#    "src/msi_stats.py {input} 1>{output} 2>{log.stderr}"

# summary of both mmr and msi
rule msi_mini:
  input:
    genes=config["genes_mmr"],
    summary="out/msi.summary.tsv"
  output:
    "out/msi.summary.mini.tsv"
  shell:
    "src/just_mmr.py {input.genes} < {input.summary} > {output}"

rule msi_assess_transcribed_rotated:
  input:
    mmr="out/mmr.summary",
    counts="out/mutations.summary",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers'])
  output:
    "out/msi.summary.rotated.transcribed.tsv"
  log:
    stderr="log/msi.summary_rotated_transcribed.stderr",
  shell:
    "src/msi_stats.py --verbose --mmr {input.mmr} --counts {input.counts} --vcfs {input.vcfs} --rotate_context --transcribed_strand 1>{output} 2>{log.stderr}"

rule msi_assess_rotated:
  input:
    mmr="out/mmr.summary",
    counts="out/mutations.summary",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers'])
  output:
    "out/msi.summary.rotated.tsv"
  log:
    stderr="log/msi.summary_rotated.stderr",
  shell:
    "src/msi_stats.py --verbose --mmr {input.mmr} --counts {input.counts} --vcfs {input.vcfs} --rotate_context 1>{output} 2>{log.stderr}"

rule msi_assess_complemented_rotated:
  input:
    mmr="out/mmr.summary",
    counts="out/mutations.summary",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers'])
  output:
    "out/msi.summary.rotated.complemented.tsv"
  log:
    stderr="log/msi.summary_rotated_complemented.stderr",
  shell:
    "src/msi_stats.py --verbose --mmr {input.mmr} --counts {input.counts} --vcfs {input.vcfs} --rotate_context --complement 1>{output} 2>{log.stderr}"

rule msi_assess:
  input:
    mmr="out/mmr.summary",
    counts="out/mutations.summary",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers'])
  output:
    "out/msi.summary.tsv"
  log:
    stderr="log/msi.summary.stderr",
  shell:
    "src/msi_stats.py --verbose --mmr {input.mmr} --counts {input.counts} --vcfs {input.vcfs} 1>{output} 2>{log.stderr}"

### find unique msi mutated loci
# process:

# find uniquely mutated loci for each tumour
rule msi_find_unique_loci:
  input:
    msi="out/msi.cluster.tumours",
    vcf=expand("out/{{tumour}}.msi.{caller}.annotated.somatic.filtered.vcf", caller=config['msi_callers'])
  output:
    "out/{tumour}.msi.unique.vcf"
  log:
    stderr="log/msi.unique.{tumour}.stderr",
  params:
    tumour="{tumour}"
  shell:
    "module load bedtools-intel/2.27.1 && "
    "src/msi_diff.py --sample1 {params.tumour} --verbose < {input.msi}  2>{log.stderr} | grep \"^\(Cat\|{params.tumour}\)\t\" | awk -v OFS='\t' '{{ print $4, $5-1, $6-1 }}' | " # makes a bed file
    "bedtools intersect -header -a {input.vcf} -b stdin > {output}"

rule msi_combine_unique_loci:
  input:
    vcfs=expand("out/{tumour}.msi.unique.vcf", tumour=config['tumours'])
  output:
    "out/msi.unique.tsv"
  log:
    stderr="log/msi.unique.stderr",
  shell:
    "src/combine_vcfs.py --vcfs {input.vcfs} >{output} 2>{log.stderr}"

###

rule msi_measure_summary:
  input:
    expand("out/{tumour}.msi_measure_summary", tumour=config['tumours'])
  output:
    "out/msi.measure.summary"
  shell:
    "cat {input} > {output}"

# visualization: clustering, etc
rule msi_cluster_vis:
  input:
    "out/msi.cluster.tumours",
    "cfg/htsdb.csv"
  output:
    "out/msi.tumours.png"
  log:
    stderr="log/msi_cluster_vis.stderr",
  shell:
    "src/cluster_msi.py --image {output} --verbose --categories {input[1]} <{input[0]} 2>{log.stderr}"

rule msi_cluster_vis_range:
  input:
    "out/msi.cluster.{range}.tsv",
    "cfg/htsdb.csv"
  output:
    "out/msi.cluster.{range}.png"
  log:
    stderr="log/msi_cluster_vis_{range}.stderr",
  shell:
    "src/cluster_msi.py --image {output} --verbose --categories {input[1]} <{input[0]} 2>{log.stderr}"

rule msi_cluster_primaries:
  input:
    bed="out/regions.msi.final.exons.bed",
    categories="cfg/htsdb.csv",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers']),
  output:
    "out/msi.primaries.cluster"
  log:
    stderr="log/msi.cluster.stderr",
  shell:
    "src/count_mutations_by_region.py --bed {input.bed} --vcf {input.vcfs} --use_lengths --categories {input.categories} --category Primary >{output} 2>{log.stderr}"

rule msi_cluster_blood:
  input:
    bed="out/regions.msi.final.exons.bed",
    categories="cfg/htsdb.csv",
    vcfs=expand("out/{sample}.msi.{caller}.annotated.vcf", sample=config['samples'], caller=config['msi_callers']),
  output:
    "out/msi.blood.cluster"
  log:
    stderr="log/msi.blood.cluster.stderr",
  shell:
    "src/count_mutations_by_region.py --verbose --bed {input.bed} --vcf {input.vcfs} --use_lengths --categories {input.categories} --category 'Whole-blood' >{output} 2>{log.stderr}"

rule msi_cluster_tumours:
  input:
    bed="out/regions.msi.final.exons.bed",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers']),
  output:
    "out/msi.cluster.tumours"
  log:
    stderr="log/msi.cluster.stderr",
  shell:
    "src/count_mutations_by_region.py --bed {input.bed} --vcf {input.vcfs} --use_lengths >{output} 2>{log.stderr}"

rule msi_cluster_range:
  input:
    bed="out/regions.msi.final.exons.bed",
    vcfs=expand("out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf", tumour=config['tumours'], caller=config['msi_callers']),
  output:
    "out/msi.cluster.{range}.tsv"
  log:
    stderr="log/msi.cluster.{range}.stderr"
  params:
    start=lambda wildcards: wildcards.range.split(',')[0],
    finish=lambda wildcards: wildcards.range.split(',')[1]
  shell:
    "src/count_mutations_by_region.py --bed {input.bed} --vcf {input.vcfs} --use_lengths --minlength {params.start} --maxlength {params.finish} --minsamples 1 >{output} 2>{log.stderr}"

rule msi_repeat_context_vis:
  input:
    "out/msi.summary.tsv"
  output:
    "out/msi.repeat_context.all.heatmap.png"
  log:
    stderr="log/msi.repeat_context_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rt_ --max_len 4 --threshold {params.threshold} --rotate_context < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rt_ --max_len 4 --threshold {params.threshold} --rotate_context < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_context_transcribed_vis_norm:
  input:
    "out/msi.summary.rotated.transcribed.tsv"
  output:
    "out/msi.repeat_context.all.rotated.transcribed.sample_norm.heatmap.png"
  log:
    stderr="log/msi.repeat_context_transcribed.vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_sample --prefix rt_ --max_len 4 --threshold {params.threshold} --rotate_context < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rt_ --max_len 4 --threshold {params.threshold} --rotate_context < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_context_transcribed_vis:
  input:
    "out/msi.summary.rotated.transcribed.tsv"
  output:
    "out/msi.repeat_context.all.rotated.transcribed.heatmap.png"
  log:
    stderr="log/msi.repeat_context_transcribed.vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rt_ --max_len 4 --threshold {params.threshold} --rotate_context < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rt_ --max_len 4 --threshold {params.threshold} --rotate_context < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_context_emast_vis:
  input:
    "out/msi.summary.tsv"
  output:
    "out/msi.repeat_context_emast.all.heatmap.png"
  log:
    stderr="log/msi.repeat_context_emast_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rt_ --min_len 4 --rotate_context --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rt_ --min_len 4 --rotate_context --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_indel_context_vis:
  input:
    "out/msi.summary.tsv"
  output:
    "out/msi.indel_context.all.heatmap.png"
  log:
    stderr="log/msi.indel_context_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix il_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix il_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_raw_vis_norm:
  input:
    "out/msi.summary.rotated.tsv"
  output:
    "out/msi.repeat_indel_context_rotated.all.sample_norm.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --prefix rtil_ --threshold {params.threshold} --normalize_sample < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_raw_vis:
  input:
    "out/msi.summary.rotated.tsv"
  output:
    "out/msi.repeat_indel_context_rotated.all.raw.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --prefix rtil_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_transcribed_higher_threshold_sample_norm_vis:
  input:
    tsv="out/msi.summary.rotated.transcribed.tsv",
  output:
    "out/msi.repeat_indel_context_rotated.all.representative.transcribed.sample_norm.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_transcribed_vis.sample_norm.stderr"
  params:
    samples=config['representative_samples'],
    threshold=0
  shell:
    "src/filter_rows.py --verbose --include {params.samples} <{input.tsv} >tmp/msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis.tsv 2>{log.stderr} && "
    "src/context_heatmap.py --verbose --image {output} --normalize_sample --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis.tsv 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_sample --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis.tsv 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_complemented_higher_threshold_vis:
  input:
    tsv="out/msi.summary.rotated.complemented.tsv",
  output:
    "out/msi.repeat_indel_context_rotated.all.representative.complemented.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_transcribed_vis.stderr"
  params:
    samples=config['representative_samples'],
    threshold=0
  shell:
    "src/filter_rows.py --verbose --include {params.samples} <{input.tsv} >tmp/msi_repeat_indel_context_rotated_complemented_higher_threshold_vis.tsv 2>{log.stderr} && "
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_complemented_higher_threshold_vis.tsv 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_complemented_higher_threshold_vis.tsv 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis:
  input:
    tsv="out/msi.summary.rotated.transcribed.tsv",
  output:
    "out/msi.repeat_indel_context_rotated.all.representative.transcribed.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_transcribed_vis.stderr"
  params:
    samples=config['representative_samples'],
    threshold=0
  shell:
    "src/filter_rows.py --verbose --include {params.samples} <{input.tsv} >tmp/msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis.tsv 2>{log.stderr} && "
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis.tsv 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_transcribed_higher_threshold_vis.tsv 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_transcribed_high_threshold_vis:
  input:
    "out/msi.summary.rotated.transcribed.tsv"
  output:
    "out/msi.repeat_indel_context_rotated.all.threshold_0.3.transcribed.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_transcribed_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_high_threshold_vis:
  input:
    "out/msi.summary.rotated.tsv"
  output:
    "out/msi.repeat_indel_context_rotated.all.threshold_0.3.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_log_vis:
  input:
    "out/msi.summary.rotated.tsv"
  output:
    "out/msi.repeat_indel_context_rotated.all.threshold_0.3.log.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} --log < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} --log < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_vis_norm:
  input:
    tsv="out/msi.summary.rotated.tsv",
  output:
    "out/msi.repeat_indel_context_rotated.all.normalized.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --normalize_sample --prefix rtil_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_sample --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_representative_vis_norm:
  input:
    tsv="out/msi.summary.rotated.tsv",
  output:
    "out/msi.repeat_indel_context_rotated.all.representative.normalized.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis_representative.stderr"
  params:
    threshold=0,
    samples=config['representative_samples']
  shell:
    "src/filter_rows.py --verbose --include {params.samples} <{input.tsv} >tmp/msi_repeat_indel_context_rotated_higher_threshold_vis.tsv 2>{log.stderr} && "
    "src/context_heatmap.py --verbose --image {output} --normalize_max --normalize_sample --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_higher_threshold_vis.tsv 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_sample --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_higher_threshold_vis.tsv 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_representative_vis:
  input:
    tsv="out/msi.summary.rotated.tsv",
  output:
    "out/msi.repeat_indel_context_rotated.all.representative.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis_representative.stderr"
  params:
    threshold=0,
    samples=config['representative_samples']
  shell:
    "src/filter_rows.py --verbose --include {params.samples} <{input.tsv} >tmp/msi_repeat_indel_context_rotated_higher_threshold_vis.tsv 2>{log.stderr} && "
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_higher_threshold_vis.tsv 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < tmp/msi_repeat_indel_context_rotated_higher_threshold_vis.tsv 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_rotated_vis:
  input:
    "out/msi.summary.rotated.tsv"
  output:
    "out/msi.repeat_indel_context_rotated.all.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_rotated_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

rule msi_repeat_indel_context_vis:
  input:
    "out/msi.summary.tsv"
  output:
    "out/msi.repeat_indel_context.all.heatmap.png"
  log:
    stderr="log/msi.repeat_indel_context_vis.stderr"
  params:
    threshold=0
  shell:
    "src/context_heatmap.py --verbose --image {output} --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>{log.stderr} && "
    "(IFS=$(echo -en \"\\n\\b\") && for category in $(cut -f3 {input} | sort -u | grep -v Type); do "
    "image=\"{output}\"; "
    "image=${{image/all/$category}}; "
    "src/context_heatmap.py --verbose --category \"$category\" --image \"$image\" --normalize_max --prefix rtil_ --threshold {params.threshold} < {input} 2>>{log.stderr}; "
    "done)"

# tumour specific analysis
# note that we use the vcf before germline has been subtracted out
rule msi_measure:
  input:
    regions="out/regions.msi.final.exons.bed", # exons only for now
    vcfs=expand("out/{{tumour}}.msi.{caller}.annotated.vcf", caller=config['msi_callers']), # multiple callers are currently combined (concatenated)
    metadata="cfg/sample-metadata.csv"
  output:
    detail="out/{tumour}.msi_measure_detail",
    summary="out/{tumour}.msi_measure_summary"
  log:
    stderr="log/msi_measure.{tumour}.stderr",
  shell:
    #"src/msi_measure.sh {input} {output[1]} >{output[0]} 2>{log.stderr}"
    "src/msi_measure.py --metadata {input.metadata} --verbose --regions {input.regions} --tumours {input.vcfs} --summary {output.summary} >{output.detail} 2>{log.stderr}"

# tumour specific - remove germline calls
rule filter_somatic_msi:
  input:
    "out/{tumour}.msi.{caller}.annotated.vcf",
    expand("out/{sample}.msi.{{caller}}.annotated.vcf", sample=config['samples']) # we depend on the germline which is one of the other samples
  output:
    "out/{tumour}.msi.{caller}.annotated.somatic.vcf"
  log:
    stderr="log/filter_somatic_msi.{tumour}.{caller}.stderr"
  shell:
    "src/subtract_germline.sh {input[0]} >{output} 2>{log.stderr}"

# filter and annotate with af and dp
# note that annotate af and dp is pindel only
rule filter_somatic_msi_qual:
  input:
    vcf="out/{tumour}.msi.{caller}.annotated.somatic.vcf"
  output:
    "out/{tumour}.msi.{caller}.annotated.somatic.filtered.vcf"
  log:
    stderr="log/{tumour}.{caller}.filter_somatic_msi_qual.stderr"
  params:
    qual=config['msi_qual'],
  shell:
    "src/filter_vcf_qual.py --qual {params.qual} < {input.vcf} | src/annotate_af.py --verbose > {output} 2>{log.stderr}"

rule msi_regions_exons:
  input:
    "out/regions.msi.final.bed",
  output:
    "out/regions.msi.final.exons.bed",
  shell:
    "grep exon < {input} > {output}"

# find common somatic calls for each caller
rule common_msi_mutations:
  input:
    expand("out/{tumour}.msi.{{caller}}.annotated.somatic.filtered.vcf", tumour=config['tumours'])
  output:
    "out/msi.{caller}.common"
  shell:
    "python src/find_common_mutations.py --vcfs {input} --threshold 2 --position_only > {output}"

# annotates vcf files with vep
#rule msi_vep:
#  input:
#    "out/regions.msi.final.bed",
#    "out/{sample}.msi.{caller}.annotated.vcf"
#  output:
#    "out/{sample}.msi.{caller}.annotated.vep.vcf",
#  log:
#    stderr="log/msi.vep.{sample}.{caller}.stderr",
#    stdout="log/msi.vep.{sample}.{caller}.stdout"
#  shell:
#    "src/annotate.sh {config[genome]} {input} {output} 1>{log.stdout} 2>{log.stderr}"

rule msi_cluster_samples_vis:
  input:
    "out/msi.samples.cluster",
    "cfg/htsdb.csv"
  output:
    "out/msi.samples.png"
  log:
    stderr="log/msi_samples_cluster_vis.stderr",
  shell:
    "src/cluster_msi.py --image {output} --verbose --categories {input[1]} <{input[0]} 2>{log.stderr}"

# cluster msi on all samples (not just tumour)
rule msi_cluster_samples:
  input:
    bed="out/regions.msi.final.exons.bed",
    categories="cfg/htsdb.csv",
    vcfs=expand("out/{sample}.msi.{caller}.annotated.vcf", sample=config['samples'], caller=config['msi_callers']),
  output:
    "out/msi.samples.cluster"
  log:
    stderr="log/msi.cluster.samples.stderr",
  shell:
    "src/count_mutations_by_region.py --bed {input.bed} --vcf {input.vcfs} --use_lengths --categories {input.categories} >{output} 2>{log.stderr}"


# msi output is list of samples and the degree of MSI found
rule annotate_msi:
  input:
    "out/regions.msi.final.bed",
    "in/{sample}.{caller}.vcf" # each unfiltered msi_caller
  output:
    "out/{sample}.msi.{caller}.annotated.vcf" # makes a filtered vcf
  log:
    stderr="log/msi_filter.{sample}.{caller}.stderr",
  shell:
    "src/annotate_vcf.py {input[0]} < {input[1]} 1>{output} 2>{log.stderr}"

# add oncogene annotations to msi list
rule annotate_msi_all_oncogene_regions:
  input:
    "out/regions.msi.oncogenes.bed", # list of msi regions
    "out/regions.oncogenes.all.bed", # list of oncogene regions 
    "cfg/msi.seltarbase.bed", # list of seltarbase regions 
  output:
    "out/regions.msi.final.bed" # annotated regions
  log:
    stderr="log/annotate_bed.stderr",
  shell:
    "src/annotate_bed.py all_oncogene {input[1]} < {input[0]} | src/annotate_bed.py seltarbase {input[2]} > {output} 2> {log.stderr}"

# add oncogene annotations to msi list
rule annotate_msi_oncogene_regions:
  input:
    "out/regions.oncogenes.bed", # list of oncogene regions 
    "out/regions.msi.bed", # list of msi regions
  output:
    "out/regions.msi.oncogenes.bed" # annotated regions
  log:
    stderr="log/annotate_bed.stderr",
  shell:
    "src/annotate_bed.py oncogene {input[0]} < {input[1]} > {output} 2> {log.stderr}"

# add oncogene annotations to msi list
rule make_all_oncogene_regions:
  input:
    "out/oncogenes.all.msi", # list of genes 
    config["refseq"], # list of refseq regions
  output:
    "out/regions.oncogenes.all.bed" # oncogene regions
  shell:
    "module load bedtools-intel/2.27.1; "
    "src/make_bed.py {input[0]} < {input[1]} | sort -k1,1 -k2,2n > {output}" 


# add oncogene annotations to msi list
rule make_oncogene_regions:
  input:
    "out/oncogenes.msi", # list of genes 
    config["refseq"], # list of refseq regions
  output:
    "out/regions.oncogenes.bed" # oncogene regions
  shell:
    "module load bedtools-intel/2.27.1; "
    "src/make_bed.py {input[0]} < {input[1]} | sort -k1,1 -k2,2n > {output}" 

# make a list of genes relevant to msi for the cancer being studied
rule make_all_oncogenes:
  input:
    config['cosmic']
  output:
    "out/oncogenes.all.msi"
  shell:
    "cut -f1 < {input} | sort > {output}"

# make a list of genes relevant to msi for the cancer being studied
rule make_msi_oncogenes:
  input:
    config['cosmic']
  output:
    "out/oncogenes.msi"
  shell:
    "cut -f1,8,9,10,11 < {input} | grep -i {config[cancer_type]} | cut -f1 | sort > {output}"

# basic msi stats
rule bed_stats:
  input:
    "out/regions.msi.bed"
  output:
    "out/regions.msi.stats"
  log:
    stderr="log/bed_stats.log"
  shell:
    "src/bed_stats.py <{input} 1>{output} 2>{log.stderr}"

rule make_exon_annotations:
  input:
    config['refseq']
  output:
    "out/hg19.exons"
  shell:
    "src/exons_to_bed.py --annotate < {input} | sort -k1,1 -k2,2n > {output}"

rule make_exon_annotations_ncRNA:
  input:
    config['refseq']
  output:
    "out/hg19.exons.ncRNA"
  shell:
    "src/exons_to_bed.py --filter ncRNA < {input} | sort -k1,1 -k2,2n > {output}"

rule make_exon_annotations_3utr:
  input:
    config['refseq']
  output:
    "out/hg19.exons.3utr"
  shell:
    "src/exons_to_bed.py --filter 3UTR < {input} | sort -k1,1 -k2,2n > {output}"

rule make_exon_annotations_5utr:
  input:
    config['refseq']
  output:
    "out/hg19.exons.5utr"
  shell:
    "src/exons_to_bed.py --filter 5UTR < {input} | sort -k1,1 -k2,2n > {output}"

rule annotate_msi_candidates:
  input:
    msi=config["msi_loci"],
    bethesda=config["bethesda"],
    exons="out/hg19.exons",
    threeUTR="out/hg19.exons.3utr",
    fiveUTR="out/hg19.exons.5utr",
    ncRNA="out/hg19.exons.ncRNA"
  output:
    "out/msi.annotated.bed"
  shell: # TODO this could be more efficient
    "src/annotate.py --name exon {input.msi} < {input.exons} > tmp/msi.exons.bed && " # exons
    "src/annotate.py --name 3UTR tmp/msi.exons.bed < {input.threeUTR} > tmp/msi.3utr.bed && " # 3'
    "src/annotate.py --name 5UTR tmp/msi.3utr.bed < {input.fiveUTR} > tmp/msi.5utr.bed && " # 5'
    "src/annotate.py --name ncRNA tmp/msi.5utr.bed < {input.ncRNA} > tmp/msi.ncRNA.bed && " # ncRNA
    "src/annotate.py --name bethesda tmp/msi.ncRNA.bed < {input.bethesda} | sort -k1,1 -k2,2n > {output}" # bethesda

# limits msi regions by length and repeat type
rule make_msi_regions:
  input:
    "out/msi.annotated.bed"
  output:
    "out/regions.msi.bed"
  log:
    stderr="log/make_msi_regions.stderr",
  shell:
    "src/filter_msi.py --exons_only --minlen 8 --maxlen 100000 --minrepeat 1 --maxrepeat 4 < {input} 1>{output} 2>{log.stderr}"
