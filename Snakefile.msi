
# overall stats incorporating msi and mmr
#rule msi_assess:
#  input:
#    "out/mmr.summary",
#    "out/mutations.summary",
#    expand("out/{sample}.msi.{caller}.annotated.vcf", sample=config['samples'], caller=config['msi_callers'])
#  output:
#    "out/msi.summary"
#  log:
#    stderr="log/msi.summary.stderr",
#  shell:
#    "src/msi_stats.py {input} 1>{output} 2>{log.stderr}"

rule msi_assess:
  input:
    "out/mmr.summary",
    "out/mutations.summary",
    expand("out/{tumour}.msi.{caller}.annotated.somatic.vcf", tumour=config['tumours'], caller=config['msi_callers'])
  output:
    "out/msi.summary"
  log:
    stderr="log/msi.summary.stderr",
  shell:
    "src/msi_stats.py {input} 1>{output} 2>{log.stderr}"

rule msi_measure_summary:
  input:
    expand("out/{tumour}.msi_measure_summary", tumour=config['tumours'])
  output:
    "out/msi.measure.summary"
  shell:
    "cat {input} > {output}"

# tumour specific analysis
# note that we use the vcf before germline has been subtracted out
rule msi_measure:
  input:
    "out/regions.msi.final.exons.bed", # exons only for now
    expand("out/{{tumour}}.msi.{caller}.annotated.vcf", caller=config['msi_callers']) # TODO support multiple callers (?)
  output:
    "out/{tumour}.msi_measure_detail",
    "out/{tumour}.msi_measure_summary"
  log:
    stderr="log/msi_measure.{tumour}.stderr",
  shell:
    "src/msi_measure.sh {input} {output[1]} >{output[0]} 2>{log.stderr}"

# tumour specific - remove germline calls
rule filter_somatic_msi:
  input:
    "out/{tumour}.msi.{caller}.annotated.vcf"
  output:
    "out/{tumour}.msi.{caller}.annotated.somatic.vcf"
  log:
    stderr="log/filter_somatic_msi.{tumour}.{caller}.stderr"
  shell:
    "src/subtract_germline.sh {input} >{output} 2>{log.stderr}"


rule msi_regions_exons:
  input:
    "out/regions.msi.final.bed",
  output:
    "out/regions.msi.final.exons.bed",
  shell:
    "grep exon < {input} > {output}"

rule common_msi_mutations:
  input:
    expand("out/{sample}.msi.{caller}.annotated.vcf", sample=config['samples'], caller=config['msi_callers'])
  output:
    "out/msi.common"
  shell:
    "python src/find_common_mutations.py --vcfs {input} --threshold 0.1 > {output}"

# annotates vcf files with vep
#rule msi_vep:
#  input:
#    "out/regions.msi.final.bed",
#    "out/{sample}.msi.{caller}.annotated.vcf"
#  output:
#    "out/{sample}.msi.{caller}.annotated.vep.vcf",
#  log:
#    stderr="log/msi.vep.{sample}.{caller}.stderr",
#    stdout="log/msi.vep.{sample}.{caller}.stdout"
#  shell:
#    "src/annotate.sh {config[genome]} {input} {output} 1>{log.stdout} 2>{log.stderr}"

# msi output is list of samples and the degree of MSI found
rule annotate_msi:
  input:
    "out/regions.msi.final.bed",
    "in/{sample}.{caller}.vcf" # each unfiltered msi_caller
  output:
    "out/{sample}.msi.{caller}.annotated.vcf" # makes a filtered vcf
  log:
    stderr="log/msi_filter.{sample}.{caller}.stderr",
  shell:
    "src/annotate_vcf.py {input[0]} < {input[1]} 1>{output} 2>{log.stderr}"

# add oncogene annotations to msi list
rule annotate_msi_all_oncogene_regions:
  input:
    "out/regions.oncogenes.all.bed", # list of oncogene regions 
    "out/regions.msi.oncogenes.bed", # list of msi regions
  output:
    "out/regions.msi.final.bed" # annotated regions
  log:
    stderr="log/annotate_bed.stderr",
  shell:
    "src/annotate_bed.py all_oncogene {input[0]} < {input[1]} > {output} 2> {log.stderr}"

# add oncogene annotations to msi list
rule annotate_msi_oncogene_regions:
  input:
    "out/regions.oncogenes.bed", # list of oncogene regions 
    "out/regions.msi.bed", # list of msi regions
  output:
    "out/regions.msi.oncogenes.bed" # annotated regions
  log:
    stderr="log/annotate_bed.stderr",
  shell:
    "src/annotate_bed.py oncogene {input[0]} < {input[1]} > {output} 2> {log.stderr}"

# add oncogene annotations to msi list
rule make_all_oncogene_regions:
  input:
    "out/oncogenes.all.msi", # list of genes 
    config["refseq"], # list of refseq regions
  output:
    "out/regions.oncogenes.all.bed" # oncogene regions
  shell:
    "module load bedtools-intel/2.27.1; "
    "src/make_bed.py {input[0]} < {input[1]} | sort -k1,1 -k2,2n > {output}" 


# add oncogene annotations to msi list
rule make_oncogene_regions:
  input:
    "out/oncogenes.msi", # list of genes 
    config["refseq"], # list of refseq regions
  output:
    "out/regions.oncogenes.bed" # oncogene regions
  shell:
    "module load bedtools-intel/2.27.1; "
    "src/make_bed.py {input[0]} < {input[1]} | sort -k1,1 -k2,2n > {output}" 

# make a list of genes relevant to msi for the cancer being studied
rule make_all_oncogenes:
  input:
    config['cosmic']
  output:
    "out/oncogenes.all.msi"
  shell:
    "cut -f1 < {input} | sort > {output}"

# make a list of genes relevant to msi for the cancer being studied
rule make_msi_oncogenes:
  input:
    config['cosmic']
  output:
    "out/oncogenes.msi"
  shell:
    "cut -f1,8,9,10,11 < {input} | grep -i {config[cancer_type]} | cut -f1 | sort > {output}"

# limits msi regions by length and repeat type
rule make_msi_regions:
  input:
    "reference/msi.candidates.bed"
  output:
    "out/regions.msi.bed"
  log:
    stderr="log/make_msi_regions.stderr",
  shell:
    "src/filter_msi.py --minlen 10 --maxlen 100000 --minrepeat 1 --maxrepeat 4 < {input} 1>{output} 2>{log.stderr}"


